const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();

app.use(cors()); // autoriser toutes les origines (pour Internet)
app.use(express.json());
app.use(express.static(path.join(__dirname, '../frontend')));

// Simuler la base de données (pour l'instant)
let users = [];
let chats = [];

// Endpoint pour l'inscription
app.post('/api/signup', (req, res) => {
  const { username, first, last, password } = req.body;
  if(!username || !password) return res.status(400).json({error: "Username & password required"});
  if(users.find(u => u.username === username)) return res.status(400).json({error: "Username taken"});
  users.push({username, first, last, password, role: 'user', avatar: '', blocked: false});
  res.json({success: true});
});

// Endpoint pour login
app.post('/api/login', (req,res)=>{
  const { username, password } = req.body;
  const user = users.find(u => u.username===username && u.password===password);
  if(!user) return res.status(400).json({error: "Invalid credentials"});
  res.json({success: true, user});
});

// Endpoint pour envoyer un message
app.post('/api/message', (req,res)=>{
  const { username, text } = req.body;
  if(!username || !text) return res.status(400).json({error:"Missing fields"});
  let chat = chats[0];
  if(!chat){ chat = {name:'Général', messages:[]}; chats.push(chat); }
  const msg = {who:'user', username, text};
  chat.messages.push(msg);
  // ici tu peux ajouter la réponse du bot
  const botReply = {who:'bot', username:'MongeBot', text: `Réponse automatique à : ${text}`};
  chat.messages.push(botReply);
  res.json({success:true, messages: chat.messages});
});

// Fallback: servir index.html
app.get('*', (req,res)=>{
  res.sendFile(path.join(__dirname,'../frontend/index.html'));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', ()=>console.log(`Server running on port ${PORT}`));
